// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Ticketing.API.Proxies.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Ticketing.API.Proxies.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace Ticketing.API.Proxies
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Ticketing.Security.Authentication.Model.Parameters;
    using global::Ticketing.Security.Authentication.Model.Results;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAccountProxy : IAccountProxy
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAccountProxy(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<AuthenticationContext> IAccountProxy.Authenticate(AuthenticationParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Authenticate", new Type[] { typeof(AuthenticationParameters) });
            return (Task<AuthenticationContext>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IAccountProxy.GenerateToken(AuthenticationContext context)
        {
            var arguments = new object[] { context };
            var func = requestBuilder.BuildRestResultFuncForMethod("GenerateToken", new Type[] { typeof(AuthenticationContext) });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Ticketing.API.Proxies
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Ticketing.Data.ActionModels.Client.Parameters;
    using global::Ticketing.Data.ActionModels.Client.Results;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIClientProxy : IClientProxy
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIClientProxy(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<ClientViewResult>> IClientProxy.Get(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<List<ClientViewResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ClientViewResult> IClientProxy.Get(string authorization, int id)
        {
            var arguments = new object[] { authorization, id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string), typeof(int) });
            return (Task<ClientViewResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<ClientViewResult>> IClientProxy.Get(ClientSearchParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(ClientSearchParameters) });
            return (Task<List<ClientViewResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ClientCreateResult> IClientProxy.Create(ClientCreateParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(ClientCreateParameters) });
            return (Task<ClientCreateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ClientCreateResult> IClientProxy.Update(string authorization, int id, ClientCreateParameters parameters)
        {
            var arguments = new object[] { authorization, id, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(string), typeof(int), typeof(ClientCreateParameters) });
            return (Task<ClientCreateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IClientProxy.Delete(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(int) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ClientUpdateResult> IClientProxy.Activate(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(int) });
            return (Task<ClientUpdateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ClientUpdateResult> IClientProxy.Deactivate(string authorization, int id)
        {
            var arguments = new object[] { authorization, id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Deactivate", new Type[] { typeof(string), typeof(int) });
            return (Task<ClientUpdateResult>)func(Client, arguments);
        }
    }
}

namespace Ticketing.API.Proxies
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Ticketing.Data.ActionModels.Files.Parameters;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIFileProxy : IFileProxy
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIFileProxy(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<byte[]> IFileProxy.Get(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(int) });
            return (Task<byte[]>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<byte[]> IFileProxy.GetFace(int staffId)
        {
            var arguments = new object[] { staffId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFace", new Type[] { typeof(int) });
            return (Task<byte[]>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<byte[]> IFileProxy.GetVoice(int staffId)
        {
            var arguments = new object[] { staffId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetVoice", new Type[] { typeof(int) });
            return (Task<byte[]>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IFileProxy.Upload(FileUploadParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Upload", new Type[] { typeof(FileUploadParameters) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Ticketing.API.Proxies
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Ticketing.Protection.Models;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIOtpProxy : IOtpProxy
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIOtpProxy(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IOtpProxy.Generate(OtpGenerateParameter id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Generate", new Type[] { typeof(OtpGenerateParameter) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IOtpProxy.Validate(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Validate", new Type[] { typeof(int) });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Ticketing.API.Proxies
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Ticketing.Data.ActionModels.Parameters;
    using global::Ticketing.Data.ActionModels.Product.Parameters;
    using global::Ticketing.Data.ActionModels.Product.Results;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIProductProxy : IProductProxy
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIProductProxy(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<ProductViewResult>> IProductProxy.Get()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] {  });
            return (Task<List<ProductViewResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProductViewResult> IProductProxy.Get(ProductSearchParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(ProductSearchParameters) });
            return (Task<ProductViewResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProductCreateResult> IProductProxy.Create(string authorization, ProductCreateParameters parameters)
        {
            var arguments = new object[] { authorization, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(string), typeof(ProductCreateParameters) });
            return (Task<ProductCreateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ProductUpdateResult> IProductProxy.Update(string authorization, int id, ProductUpdateParameters parameters)
        {
            var arguments = new object[] { authorization, id, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(string), typeof(int), typeof(ProductUpdateParameters) });
            return (Task<ProductUpdateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IProductProxy.Delete(string authorization, int id)
        {
            var arguments = new object[] { authorization, id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(string), typeof(int) });
            return (Task<int>)func(Client, arguments);
        }
    }
}

namespace Ticketing.API.Proxies
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Ticketing.Data.ActionModels.Reply.Parameters;
    using global::Ticketing.Data.ActionModels.Reply.Results;
    using global::Ticketing.Data.Enums;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIReplyProxy : IReplyProxy
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIReplyProxy(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<ReplyViewResult>> IReplyProxy.Get(ReplySearchParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(ReplySearchParameters) });
            return (Task<List<ReplyViewResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ReplyCreateResult> IReplyProxy.Create(ReplyCreateParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(ReplyCreateParameters) });
            return (Task<ReplyCreateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ReplyStatus> IReplyProxy.Update(int id, SenderType senderType)
        {
            var arguments = new object[] { id, senderType };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(int), typeof(SenderType) });
            return (Task<ReplyStatus>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IReplyProxy.Delete(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(int) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IReplyProxy.Notifications(int id, SenderType senderType)
        {
            var arguments = new object[] { id, senderType };
            var func = requestBuilder.BuildRestResultFuncForMethod("Notifications", new Type[] { typeof(int), typeof(SenderType) });
            return (Task<int>)func(Client, arguments);
        }
    }
}

namespace Ticketing.API.Proxies
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Ticketing.Data.ActionModels.StaffMember.Parameters;
    using global::Ticketing.Data.ActionModels.StaffMember.Results;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIStaffMemberProxy : IStaffMemberProxy
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIStaffMemberProxy(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<StaffMemberViewResult>> IStaffMemberProxy.Get(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(string) });
            return (Task<List<StaffMemberViewResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<StaffMemberViewResult> IStaffMemberProxy.Get(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(int) });
            return (Task<StaffMemberViewResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<StaffMemberViewResult>> IStaffMemberProxy.Get(StaffMemberSearchParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(StaffMemberSearchParameters) });
            return (Task<List<StaffMemberViewResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<StaffMemberCreateResult> IStaffMemberProxy.Create(StaffMemberCreateParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(StaffMemberCreateParameters) });
            return (Task<StaffMemberCreateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<StaffMemberUpdateResult> IStaffMemberProxy.Update(int id, StaffMemberCreateParameters parameters)
        {
            var arguments = new object[] { id, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(int), typeof(StaffMemberCreateParameters) });
            return (Task<StaffMemberUpdateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IStaffMemberProxy.Delete(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(int) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<StaffMemberUpdateResult> IStaffMemberProxy.Activate(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(int) });
            return (Task<StaffMemberUpdateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<StaffMemberUpdateResult> IStaffMemberProxy.Deactivate(string authorization, int id)
        {
            var arguments = new object[] { authorization, id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Deactivate", new Type[] { typeof(string), typeof(int) });
            return (Task<StaffMemberUpdateResult>)func(Client, arguments);
        }
    }
}

namespace Ticketing.API.Proxies
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Ticketing.Data.ActionModels.Statistic.Results;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIStatisticProxy : IStatisticProxy
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIStatisticProxy(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<int> IStatisticProxy.GetOpenTicket(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOpenTicket", new Type[] { typeof(string) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IStatisticProxy.GetCloseTicket(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCloseTicket", new Type[] { typeof(string) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IStatisticProxy.GetCloseTicket(string authorization, int staffMemberId)
        {
            var arguments = new object[] { authorization, staffMemberId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCloseTicket", new Type[] { typeof(string), typeof(int) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IStatisticProxy.GetInprogressTicket(string authorization, int staffMemberId)
        {
            var arguments = new object[] { authorization, staffMemberId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetInprogressTicket", new Type[] { typeof(string), typeof(int) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IStatisticProxy.GetSolveTicket(string authorization, int staffMemberId)
        {
            var arguments = new object[] { authorization, staffMemberId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetSolveTicket", new Type[] { typeof(string), typeof(int) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IStatisticProxy.GetAllClients(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllClients", new Type[] { typeof(string) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<MostProductiveEmployeeResult> IStatisticProxy.MostProductiveEmployee(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("MostProductiveEmployee", new Type[] { typeof(string) });
            return (Task<MostProductiveEmployeeResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<int> IStatisticProxy.AverageTicketsPerStaff(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("AverageTicketsPerStaff", new Type[] { typeof(string) });
            return (Task<int>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<TicketsPerProductResult>> IStatisticProxy.NumberOfTicketsPerProduct(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("NumberOfTicketsPerProduct", new Type[] { typeof(string) });
            return (Task<List<TicketsPerProductResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<TicketsPerProductResult>> IStatisticProxy.NumberOfTicketsPerProduct(string authorization, int staffMemberId)
        {
            var arguments = new object[] { authorization, staffMemberId };
            var func = requestBuilder.BuildRestResultFuncForMethod("NumberOfTicketsPerProduct", new Type[] { typeof(string), typeof(int) });
            return (Task<List<TicketsPerProductResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<TicketPerStatusResult>> IStatisticProxy.NumberOfTicketsStatus(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("NumberOfTicketsStatus", new Type[] { typeof(string) });
            return (Task<List<TicketPerStatusResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<TicketsPerStaffResult>> IStatisticProxy.NumberOfTicketsPerEmployee(string authorization)
        {
            var arguments = new object[] { authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("NumberOfTicketsPerEmployee", new Type[] { typeof(string) });
            return (Task<List<TicketsPerStaffResult>>)func(Client, arguments);
        }
    }
}

namespace Ticketing.API.Proxies
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Ticketing.Data.ActionModels.Ticket.Parameters;
    using global::Ticketing.Data.ActionModels.Ticket.Results;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITicketProxy : ITicketProxy
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITicketProxy(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<TicketViewResult>> ITicketProxy.Get()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] {  });
            return (Task<List<TicketViewResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<TicketViewResult>> ITicketProxy.Get(TicketSearchParameters parameters)
        {
            var arguments = new object[] { parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(TicketSearchParameters) });
            return (Task<List<TicketViewResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TicketViewResult> ITicketProxy.Get(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(int) });
            return (Task<TicketViewResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TicketCreateResult> ITicketProxy.Create(string authorization, TicketCreateParameters parameters)
        {
            var arguments = new object[] { authorization, parameters };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(string), typeof(TicketCreateParameters) });
            return (Task<TicketCreateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TicketUpdateResult> ITicketProxy.Update(string authorization, int id)
        {
            var arguments = new object[] { authorization, id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(string), typeof(int) });
            return (Task<TicketUpdateResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TicketUpdateResult> ITicketProxy.Update(string authorization, TicketChangeInformationParameters parameter)
        {
            var arguments = new object[] { authorization, parameter };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(string), typeof(TicketChangeInformationParameters) });
            return (Task<TicketUpdateResult>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
